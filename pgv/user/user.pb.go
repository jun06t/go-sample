// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: user.proto

package user

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ユーザー情報を表すメッセージ
type User struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ユーザーID（必須、正の整数）
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// ユーザー名（必須、3-20文字）
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// メールアドレス（必須、有効なメール形式）
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// 年齢（18-120歳）
	Age int32 `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	// 電話番号（オプション、10桁の数字）
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	// 住所情報（必須）
	Address *Address `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// タグ（複数、各タグは1-10文字）
	Tags          []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *User) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// 住所情報
type Address struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 国（必須、2文字の国コード）
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// 都道府県（必須、1-50文字）
	Prefecture string `protobuf:"bytes,2,opt,name=prefecture,proto3" json:"prefecture,omitempty"`
	// 市区町村（必須、1-100文字）
	City string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	// 番地（オプション、1-200文字）
	Street string `protobuf:"bytes,4,opt,name=street,proto3" json:"street,omitempty"`
	// 郵便番号（オプション、7桁の数字）
	PostalCode    string `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetPrefecture() string {
	if x != nil {
		return x.Prefecture
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

var File_user_proto protoreflect.FileDescriptor

const file_user_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"user.proto\x12\x04user\x1a\x17validate/validate.proto\"\x91\x02\n" +
	"\x04User\x12\x17\n" +
	"\x02id\x18\x01 \x01(\x03B\a\xfaB\x04\"\x02 \x00R\x02id\x12.\n" +
	"\x04name\x18\x02 \x01(\tB\x1a\xfaB\x17r\x15\x10\x03\x18\x142\x0f^[a-zA-Z0-9_]+$R\x04name\x12\x1d\n" +
	"\x05email\x18\x03 \x01(\tB\a\xfaB\x04r\x02`\x01R\x05email\x12\x1b\n" +
	"\x03age\x18\x04 \x01(\x05B\t\xfaB\x06\x1a\x04\x18x(\x12R\x03age\x12+\n" +
	"\x05phone\x18\x05 \x01(\tB\x15\xfaB\x12r\x102\v^[0-9]{10}$\xd0\x01\x01R\x05phone\x121\n" +
	"\aaddress\x18\x06 \x01(\v2\r.user.AddressB\b\xfaB\x05\x8a\x01\x02\x10\x01R\aaddress\x12$\n" +
	"\x04tags\x18\a \x03(\tB\x10\xfaB\r\x92\x01\n" +
	"\x10\x05\"\x06r\x04\x10\x01\x18\n" +
	"R\x04tags\"\xdf\x01\n" +
	"\aAddress\x12.\n" +
	"\acountry\x18\x01 \x01(\tB\x14\xfaB\x11r\x0f2\n" +
	"^[A-Z]{2}$\x98\x01\x02R\acountry\x12)\n" +
	"\n" +
	"prefecture\x18\x02 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x182R\n" +
	"prefecture\x12\x1d\n" +
	"\x04city\x18\x03 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18dR\x04city\x12#\n" +
	"\x06street\x18\x04 \x01(\tB\v\xfaB\br\x06\x18\xc8\x01\xd0\x01\x01R\x06street\x125\n" +
	"\vpostal_code\x18\x05 \x01(\tB\x14\xfaB\x11r\x0f2\n" +
	"^[0-9]{7}$\xd0\x01\x01R\n" +
	"postalCodeB&Z$github.com/jun06t/go-sample/pgv/userb\x06proto3"

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData []byte
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_user_proto_rawDesc), len(file_user_proto_rawDesc)))
	})
	return file_user_proto_rawDescData
}

var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_user_proto_goTypes = []any{
	(*User)(nil),    // 0: user.User
	(*Address)(nil), // 1: user.Address
}
var file_user_proto_depIdxs = []int32{
	1, // 0: user.User.address:type_name -> user.Address
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_user_proto_rawDesc), len(file_user_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
